import { recurseObject } from "../RecursiveService";
import { FileNode, fileNodeTypeGuard } from "../types/fileParsing/FileNode";
import { DefinedFunction } from "../types/fileParsing/function/DefinedFunction";
import { Ident } from "../types/fileParsing/Ident";
import { DefinedVariable } from "../types/fileParsing/variable/DefinedVariable";
import { TreeNode } from "../types/TreeNode";
import { VulnerabilityConfig } from "../types/vulnerabilityTypes/VulnerabilityConfig";
import { getVulnerabilityConfigurationList }  from "./VulnerabilityConfig";

export function prepVulnerabilityData(): string {
    let vulnData:VulnerabilityConfig[] = getVulnerabilityConfigurationList();
    console.log(vulnData);
    return "INCOMPLETE";
}

export function scan(scanObject:FileNode[]): boolean {

    let eventNode:FileNode = findEvent(scanObject);

    let mappings:TreeNode<FileNode>[];

    let allEventSubNodes:FileNode[] = findEventChildren(eventNode,scanObject);

    return true;
}

function findEvent(scanObject:FileNode[]): FileNode {

    for(let i:number = 0; i < scanObject.length; i++) {
        if(scanObject[i] instanceof DefinedFunction){
            let node:DefinedFunction = scanObject[i];

            // exports.handler = ...
            if(node.name === "handler" && node.super?.some((a:any) => a.name === 'exports')){
                if(node.parameterNames) return node.parameterNames[0][0];
            }
        }
    }

    console.log("Unable to locate handler.")
    return null as any;
}

function findEventChildren(event:FileNode, scanObject:FileNode[]):FileNode[] {

    let nodeList:FileNode[] = [];
    recurseObject<FileNode>(
        scanObject,
        function(obj:any):boolean {
            console.log(obj);
            return fileNodeTypeGuard(obj) && 
            JSON.stringify(obj).includes(`"name":"${event.name}"`) &&
            !(obj instanceof Ident);
        },
        function(obj:any):FileNode {return !Array.isArray(obj) ? obj : null as any},
        nodeList,
        0
    );
    console.log("NODE LIST");
    console.log(nodeList)
    return nodeList;
}

function funcHelper(scanObject:FileNode[]): FileNode[] {
    // for() {

    // }
    return null as any;
}

